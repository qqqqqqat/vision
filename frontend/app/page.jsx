"use client";

import { useState, useEffect, useRef } from "react";
import Webcam from "react-webcam";
import axios from "axios";
import { useGesture } from "@use-gesture/react";

export default function PanoramaCapture() {
  const [capturing, setCapturing] = useState(false);
  const [detectedTexts, setDetectedTexts] = useState([]);
  const [ocrText, setOcrText] = useState("");
  const [audioUrl, setAudioUrl] = useState(null);
  const webcamRef = useRef(null);

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Å‡∏î‡∏Ñ‡πâ‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ñ‡πà‡∏≤‡∏¢‡∏†‡∏≤‡∏û
  const bind = useGesture({
    onPointerDown: () => startCapturing(),
    onPointerUp: () => stopCapturing(),
  });

  // ‡∏ñ‡πà‡∏≤‡∏¢‡∏†‡∏≤‡∏û‡∏ó‡∏∏‡∏Å 0.3 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
  useEffect(() => {
    let captureInterval;
    if (capturing) {
      captureInterval = setInterval(() => {
        captureImage();
      }, 300);
    } else {
      clearInterval(captureInterval);
    }
    return () => clearInterval(captureInterval);
  }, [capturing]);

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏ó‡∏∏‡∏Å 0.5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
  useEffect(() => {
    const interval = setInterval(() => {
      detectTextInFrame();
    }, 500);
    return () => clearInterval(interval);
  }, []);

  // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ñ‡πà‡∏≤‡∏¢‡∏†‡∏≤‡∏û
  const startCapturing = () => {
    setCapturing(true);
  };

  // ‡∏´‡∏¢‡∏∏‡∏î‡∏ñ‡πà‡∏≤‡∏¢‡∏†‡∏≤‡∏û‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏û‡∏≤‡πÇ‡∏ô‡∏£‡∏≤‡∏°‡∏≤
  const stopCapturing = async () => {
    setCapturing(false);
    try {
      const response = await axios.post("http://192.168.35.43:8000/api/process_image");
      setOcrText(response.data.ocr_text);
      setAudioUrl(`http://192.168.35.43:8000${response.data.audio_url}`);
    } catch (error) {
      console.error("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏û‡∏≤‡πÇ‡∏ô‡∏£‡∏≤‡∏°‡∏≤:", error);
    }
  };

  // ‡∏ñ‡πà‡∏≤‡∏¢‡∏†‡∏≤‡∏û‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
  const captureImage = async () => {
    const imageSrc = webcamRef.current.getScreenshot();
    const formData = new FormData();
    formData.append("file", dataURLtoBlob(imageSrc), "capture.jpg");

    try {
      await axios.post("http://192.168.35.43:8000/api/capture", formData, {
        headers: { "Content-Type": "multipart/form-data" },
      });
    } catch (error) {
      console.error("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ñ‡πà‡∏≤‡∏¢‡∏†‡∏≤‡∏û:", error);
    }
  };

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ô‡πÄ‡∏ü‡∏£‡∏°‡πÅ‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏•‡πÑ‡∏ó‡∏°‡πå
  const detectTextInFrame = async () => {
    const imageSrc = webcamRef.current.getScreenshot();
    const formData = new FormData();
    formData.append("file", dataURLtoBlob(imageSrc), "capture.jpg");

    try {
      const response = await axios.post("http://192.168.35.43:8000/api/detect_text", formData, {
        headers: { "Content-Type": "multipart/form-data" },
      });
      setDetectedTexts(response.data.detected_texts);
    } catch (error) {
      console.error("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°:", error);
    }
  };

  // ‡πÅ‡∏õ‡∏•‡∏á DataURL ‡πÄ‡∏õ‡πá‡∏ô Blob
  const dataURLtoBlob = (dataurl) => {
    const arr = dataurl.split(",");
    const mime = arr[0].match(/:(.*?);/)[1];
    const bstr = atob(arr[1]);
    let n = bstr.length;
    const u8arr = new Uint8Array(n);
    while (n--) {
      u8arr[n] = bstr.charCodeAt(n);
    }
    return new Blob([u8arr], { type: mime });
  };

  return (
    <div data-theme="dark" className="min-h-screen bg-base-200 text-white flex flex-col items-center justify-center">
      <h1 className="text-3xl font-bold mb-6">üì∏ ‡∏£‡∏∞‡∏ö‡∏ö‡∏ñ‡πà‡∏≤‡∏¢‡∏†‡∏≤‡∏û‡∏û‡∏≤‡πÇ‡∏ô‡∏£‡∏≤‡∏°‡∏≤‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°</h1>

      {/* ‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏£‡∏≠‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° */}
      <div className="relative w-full max-w-md">
        <Webcam
          audio={false}
          ref={webcamRef}
          screenshotFormat="image/jpeg"
          videoConstraints={{
            facingMode: { ideal: "environment" },
            width: { ideal: 1920 },
            height: { ideal: 1080 },
          }}
          className="rounded-lg shadow-lg"
        />

        {/* ‡∏Å‡∏£‡∏≠‡∏ö Highlight ‡∏£‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡πÑ‡∏î‡πâ */}
        <div className="absolute top-0 left-0 w-full h-full pointer-events-none">
          {detectedTexts.map((text, index) => {
            const { box } = text;
            const style = {
              position: "absolute",
              top: `${(box[0].y / 1080) * 100}%`,
              left: `${(box[0].x / 1920) * 100}%`,
              width: `${((box[2].x - box[0].x) / 1920) * 100}%`,
              height: `${((box[2].y - box[0].y) / 1080) * 100}%`,
              border: "2px solid rgba(255, 255, 255, 0.8)",
              borderRadius: "4px",
              boxShadow: "0 0 10px rgba(255, 255, 255, 0.6)",
            };
            return <div key={index} style={style} />;
          })}
        </div>
      </div>

      {/* ‡∏õ‡∏∏‡πà‡∏°‡∏ñ‡πà‡∏≤‡∏¢‡∏†‡∏≤‡∏û‡πÅ‡∏ö‡∏ö‡∏Å‡∏î‡∏Ñ‡πâ‡∏≤‡∏á */}
      <button
        {...bind()}
        className={`btn btn-accent mt-4 ${capturing ? "btn-error" : ""}`}
      >
        {capturing ? "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ñ‡πà‡∏≤‡∏¢‡∏†‡∏≤‡∏û..." : "üì∏ ‡∏Å‡∏î‡∏Ñ‡πâ‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ñ‡πà‡∏≤‡∏¢‡∏û‡∏≤‡πÇ‡∏ô‡∏£‡∏≤‡∏°‡∏≤"}
      </button>

      {/* ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° OCR */}
      {ocrText && (
        <div className="mt-6">
          <h2 className="text-xl font-semibold">üîç ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å OCR:</h2>
          <p className="p-4 bg-gray-800 rounded-lg shadow">{ocrText}</p>
        </div>
      )}

      {/* ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° */}
      {audioUrl && (
        <div className="mt-4">
          <h2 className="text-xl font-semibold">üîä ‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°:</h2>
          <audio controls src={audioUrl} className="mt-2"></audio>
        </div>
      )}
    </div>
  );
}
