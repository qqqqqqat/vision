"use client";

import { useState, useRef } from "react";
import { useGesture } from "@use-gesture/react";
import { Toaster, toast } from "react-hot-toast"; // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° Hot Toast
import Camera from "../components/Camera";
import ProgressBar from "../components/ProgressBar";
import CaptureButton from "../components/Capture";
import ProcessedImage from "../components/ProcessImage";
import OCRText from "../components/OCR";
import AudioPlayer from "../components/Audio";
import { captureImage, captureSingleImage, processImage } from "../services/api";

export default function HomePage() {
  const [capturing, setCapturing] = useState(false);
  const [loading, setLoading] = useState(false);
  const [progress, setProgress] = useState(0);
  const [processedImage, setProcessedImage] = useState(null);
  const [boundingBoxes, setBoundingBoxes] = useState([]);
  const [ocrText, setOcrText] = useState("");
  const [audioUrl, setAudioUrl] = useState(null);
  const [processingComplete, setProcessingComplete] = useState(false);
  const pressStartTime = useRef(null);
  const pressTimeoutRef = useRef(null);
  const webcamRef = useRef(null);
  const captureIntervalRef = useRef(null);

  // ‚úÖ ‡∏ñ‡πà‡∏≤‡∏¢‡∏†‡∏≤‡∏û‡∏õ‡∏Å‡∏ï‡∏¥
  const handleSingleCapture = async () => {
    if (loading) return; // ‚ùå ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏î‡∏ã‡πâ‡∏≥
    setLoading(true);
    toast.loading("üì∏ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•...", { id: "processing" });

    if (webcamRef.current) {
      const imageSrc = webcamRef.current.getScreenshot();
      if (imageSrc) {
        try {
          const response = await captureSingleImage(imageSrc);
          setProcessedImage(response.data.processed_image);
          setBoundingBoxes(response.data.bounding_boxes);
          setOcrText(response.data.ocr_text);
          setAudioUrl(response.data.audio_url);
          toast.success("‚úî ‡∏ñ‡πà‡∏≤‡∏¢‡∏†‡∏≤‡∏û‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!", { id: "processing" });
        } catch (error) {
          toast.error("üìå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ñ‡πà‡∏≤‡∏¢‡πÉ‡∏´‡∏°‡πà!", { id: "processing" });
        }
      }
    }
    setLoading(false);
  };

  // ‚úÖ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ñ‡πà‡∏≤‡∏¢‡∏û‡∏≤‡πÇ‡∏ô‡∏£‡∏≤‡∏°‡∏≤‡∏ó‡∏∏‡∏Å 1 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
  const startPanoramaCapture = () => {
    if (captureIntervalRef.current) return; // ‚ùå ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏ñ‡πà‡∏≤‡∏¢‡∏ã‡πâ‡∏≥
    setCapturing(true);
    toast.loading("üì∏ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ñ‡πà‡∏≤‡∏¢‡∏û‡∏≤‡πÇ‡∏ô‡∏£‡∏≤‡∏°‡∏≤...", { id: "processing" });

    captureIntervalRef.current = setInterval(async () => {
      if (webcamRef.current) {
        const imageSrc = webcamRef.current.getScreenshot();
        if (imageSrc) {
          await captureImage(imageSrc);
        }
      }
    }, 1000);
  };

  // ‚úÖ ‡∏´‡∏¢‡∏∏‡∏î‡∏ñ‡πà‡∏≤‡∏¢‡∏û‡∏≤‡πÇ‡∏ô‡∏£‡∏≤‡∏°‡∏≤‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•
  const stopPanoramaCapture = async () => {
    if (captureIntervalRef.current) {
      clearInterval(captureIntervalRef.current);
      captureIntervalRef.current = null;
    }

    setCapturing(false);
    setLoading(true);
    toast.loading("üõ†Ô∏è ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏†‡∏≤‡∏û‡∏û‡∏≤‡πÇ‡∏ô‡∏£‡∏≤‡∏°‡∏≤...", { id: "processing" });

    try {
      const response = await processImage();
      setProcessedImage(response.data.processed_image);
      setBoundingBoxes(response.data.bounding_boxes);
      setOcrText(response.data.ocr_text);
      setAudioUrl(response.data.audio_url);
      toast.success("‚úî ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!", { id: "processing" });
      setProcessingComplete(true);
    } catch (error) {
      toast.error("üìå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏û‡∏≤‡πÇ‡∏ô‡∏£‡∏≤‡∏°‡∏≤‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ñ‡πà‡∏≤‡∏¢‡πÉ‡∏´‡∏°‡πà!", { id: "processing" });
    }

    setLoading(false);
  };

  // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°
  const bind = useGesture({
    onPointerDown: () => {
      if (loading) return; // ‚ùå ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏î‡∏ã‡πâ‡∏≥

      pressStartTime.current = Date.now();

      // ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏ß‡∏•‡∏≤ ‡∏ñ‡πâ‡∏≤‡∏Å‡∏î‡∏Ñ‡πâ‡∏≤‡∏á‡πÄ‡∏Å‡∏¥‡∏ô 500ms ‡∏à‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ñ‡πà‡∏≤‡∏¢‡∏û‡∏≤‡πÇ‡∏ô‡∏£‡∏≤‡∏°‡∏≤
      pressTimeoutRef.current = setTimeout(() => {
        startPanoramaCapture();
      }, 500);
    },
    onPointerUp: async () => {
      clearTimeout(pressTimeoutRef.current); // ‚úÖ ‡∏•‡πâ‡∏≤‡∏á timeout ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏ñ‡πà‡∏≤‡∏¢‡∏û‡∏≤‡πÇ‡∏ô‡∏£‡∏≤‡∏°‡∏≤‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î

      if (captureIntervalRef.current) {
        await stopPanoramaCapture(); // ‚úÖ ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ñ‡πà‡∏≤‡∏¢‡∏û‡∏≤‡πÇ‡∏ô‡∏£‡∏≤‡∏°‡∏≤‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏õ‡∏•‡πà‡∏≠‡∏¢‡∏ô‡∏¥‡πâ‡∏ß
      } else {
        await handleSingleCapture(); // ‚úÖ ‡∏ñ‡πà‡∏≤‡∏¢‡∏†‡∏≤‡∏û‡∏õ‡∏Å‡∏ï‡∏¥
      }
    },
  });

  return (
    <div className="min-h-screen flex flex-col items-center justify-center bg-gray-900 text-white">
      <Toaster position="top-center" reverseOrder={false} /> {/* ‚úÖ Hot Toast */}

      <h1 className="text-2xl font-bold mb-6">üì∏ ‡∏£‡∏∞‡∏ö‡∏ö‡∏ñ‡πà‡∏≤‡∏¢‡∏†‡∏≤‡∏û</h1>
      {processingComplete && <p className="text-green-400 font-bold">‚úî ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô</p>}

      <Camera capturing={capturing} webcamRef={webcamRef} />
      {loading && <ProgressBar progress={progress} />}
      <CaptureButton bind={bind} capturing={capturing} disabled={loading} />
      {processedImage && <ProcessedImage processedImage={processedImage} boundingBoxes={boundingBoxes} />}
      {ocrText && <OCRText text={ocrText} />}
      {audioUrl && <AudioPlayer audioUrl={audioUrl} />}
    </div>
  );
}
